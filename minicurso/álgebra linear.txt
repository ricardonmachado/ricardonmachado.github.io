v = vector([1,2,3])
u = vector([-1,2,3])
----------------------------------------
u + v
----------------------------------------
u + v
----------------------------------------
2*v
----------------------------------------
u * v  # produto escalar
----------------------------------------
w = u.cross_product(v); w # produtoi vetorial u x v
----------------------------------------
u*w   # produto escalar nulo
----------------------------------------
v*w
----------------------------------------
v.norm() # norma euclidiana
----------------------------------------
v.norm(1) # 1-norma
----------------------------------------
v.norm(infinity) # norma do máximo
----------------------------------------
A = matrix([[1,2,3], [ 4,3,5], [ 6, 7, 8] ])
A
----------------------------------------
B = matrix([[0,-1, 0], [2,3,1], [1,0,3]])
----------------------------------------
A+B
----------------------------------------
A-B
----------------------------------------
A*B
----------------------------------------
3*A
----------------------------------------
matrix.zero(3)
----------------------------------------
matrix.identity(3)
----------------------------------------
matrix.ones(3)
----------------------------------------
matrix.diagonal([1,2,3])
----------------------------------------
B.inverse() # Inversa
----------------------------------------
B.T # transposta
----------------------------------------
B.trace()
----------------------------------------
B.det()
----------------------------------------
M = matrix(QQ, [[-1, 2, 1, -5],[0, 0, -1, 1],[-1, 2, 0, -4],[1, 3, 3, -1]])
M
----------------------------------------
M.echelon_form() # forma escada
----------------------------------------
M.rref() # forma escada
----------------------------------------
M.rank() #posto
----------------------------------------
A = matrix(AA,[[2, 0, 2], [2, 2, 0], [-2, -1, 2]]); A # Definindo matriz
----------------------------------------
v = vector([1, -2, 3]) # Definindo vetor
----------------------------------------
Av=A.augment(v) 
Av.rref() # Calculando a forma escada da matriz [A|v]
----------------------------------------

A = matrix(AA,[[2, 0, 2], [2, 2, 0], [-2, -1, 2]]); A # Definindo matriz
----------------------------------------
A.right_kernel()
----------------------------------------
A.transpose().image()
----------------------------------------
M = matrix(QQ, [[2, 1, 1, 1],[0, -2, 0, -2],[-2, -1, -2, 1],[-1, 0, 0, -1]])
----------------------------------------
M.right_kernel()
----------------------------------------
M.transpose().image()
----------------------------------------

B = matrix(QQ, [[-2, 2, 0], [0, -1, 0], [0, -1, -2]])
show(B)
----------------------------------------
B.charpoly()
----------------------------------------
B.charpoly().factor()
----------------------------------------
B.minpoly().factor() # B é diagonalizável, pois o polinômio minimal é produto de fatores lineares
----------------------------------------
B.eigenvalues()
----------------------------------------
show(B.eigenvectors_right())
----------------------------------------
show(B.jordan_form()) # Quando a matriz é diagonalizável, a forma diagonal é igual a forma de jordan
----------------------------------------
J, P = B.jordan_form(transformation=True)
----------------------------------------
P.columns()
----------------------------------------
(P^(-1))*B*P
----------------------------------------
C = matrix(QQ, [[31,  -4,  -4,   4], [32,   7,  -8,   8], [-23,   8,  11,  -2], [-76,  10,  16,  -7]]); C
----------------------------------------
C.charpoly().factor()
----------------------------------------
C.minpoly().factor() # C não é diagonalizável, pois o polinômio minimal possui monômio com potência >1
----------------------------------------
show(C.eigenvectors_right())
----------------------------------------
C.jordan_form()
----------------------------------------

Formas Canônicas

----------------------------------------
C = matrix([[1, -2, 3, -4],[5, 6, 7, 8],[9, 10, 11, 12],[13, 14, 15, 16]])
----------------------------------------
C.base_ring()
----------------------------------------
C.charpoly().factor()
----------------------------------------
C.minpoly().factor()
----------------------------------------
autovalores = C.eigenvalues(); autovalores
----------------------------------------
C.eigenvalues()[2].base_ring()
----------------------------------------
l = []
for i in autovalores: 
    l.append(i.radical_expression())
show(l)
----------------------------------------
C.base_ring()
----------------------------------------
show(C.jordan_form())
----------------------------------------
show(C.change_ring(SR).jordan_form())
----------------------------------------
C = matrix(SR, [[1, -2, 3, -4],[5, 6, 7, 8],[9, 10, 11, 12],[13, 14, 15, 16]])
----------------------------------------
autovalores = C.eigenvalues()
show(autovalores)
----------------------------------------
show(C.rational_form())
----------------------------------------
show(C.change_ring(AA).rational_form())
----------------------------------------













