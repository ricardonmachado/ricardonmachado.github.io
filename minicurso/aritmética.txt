---------------------------------------------------------------------
# % calcula o resto da divisão euclidiana. 
79%2  # 2 não divide 79
---------------------------------------------------------------------
90237642903537845%765324
---------------------------------------------------------------------
79//2  # (//) calcula o quociente da divisão euclidiana. 
---------------------------------------------------------------------
79//2, 79%2
---------------------------------------------------------------------
def divisao_euclidiana(a, b):
    r = a%b
    q = a//b        
    print  a,'=', b, '*', q, '+', r
---------------------------------------------------------------------
divisao_euclidiana(79, 2)
---------------------------------------------------------------------
divisao_euclidiana(90237642903537845, 765324)
---------------------------------------------------------------------
divisao_euclidiana(7^10, 51)
---------------------------------------------------------------------

34.digits()
---------------------------------------------------------------------
9283748234.digits()
---------------------------------------------------------------------
723.digits(base=2)
---------------------------------------------------------------------
723.digits(base=3)
---------------------------------------------------------------------
999999999.digits(base=12)
---------------------------------------------------------------------

# Obs. A base de entrada precisa ser no máximo 10. A base de saída pode ser até 16.
def converte_n_da_base_a_para_base_b(n, a, b):
    
    if b>16:
        return 'ERRO, base nao permitida'
    
    dlist = n.digits()
    
    nb10 = 0
    for i in xrange(len(dlist)):
        nb10 = nb10 + dlist[i]*a^i
    
    nb10list = nb10.digits(b)
    nb10list.reverse()
    
    nchar = ''
    
    for i in nb10list:
        if i<10:
            nchar = nchar + str(i)    
        elif i == 10:
            nchar = nchar + 'a'    
        elif i == 11:
            nchar = nchar + 'b'    
        elif i == 12:
            nchar = nchar + 'c'    
        elif i == 13:
            nchar = nchar + 'd'                
        elif i == 14:
            nchar = nchar + 'e'                
        elif i == 15:
            nchar = nchar + 'f'      
            
    print '['+ nchar +']' +'_'+str(b)
---------------------------------------------------------------------
converte_n_da_base_a_para_base_b(1101100, 2, 16)
---------------------------------------------------------------------
conv_ba_bb(4142,5,7)
---------------------------------------------------------------------

gcd(637, 3887)
---------------------------------------------------------------------
gcd(987654321, 123456789)
---------------------------------------------------------------------
d, x, y = xgcd(637, 3887); d, x, y
---------------------------------------------------------------------
d == 637*x + 3887*y
---------------------------------------------------------------------
637*x + 3887*y
---------------------------------------------------------------------
gcd(3, 6, 9)
---------------------------------------------------------------------
def mdc(*lista):
    #print lista
    if len(lista) < 2:
        return 'ERRO, a entrada precisa de pelo menos 2 argumentos'
    
    if len(lista) == 2:
        return gcd(*lista)
    else: 
        lista2  = [gcd(lista[0], lista[1])] + list(lista[2:])
        return mdc(*lista2)  
---------------------------------------------------------------------
mdc(4)
---------------------------------------------------------------------
mdc(3, 6, 9, 12)
---------------------------------------------------------------------
mdc(1116, 984, 855)
---------------------------------------------------------------------
mdc(18886, 1302, 12530)
---------------------------------------------------------------------
lcm(4, 6)
---------------------------------------------------------------------
lcm(45, 18)
---------------------------------------------------------------------
lcm(4, 6, 9)
---------------------------------------------------------------------
def mmc(*lista):
    #print lista
    if len(lista) < 2:
        return 'ERRO, a entrada precisa de pelo menos 2 argumentos'
    
    if len(lista) == 2:
        return lcm(*lista)
    else: 
        lista2  = [lcm(lista[0], lista[1])] + list(lista[2:])
        return mmc(*lista2)  
---------------------------------------------------------------------
mmc(5)
---------------------------------------------------------------------
mmc(4, 6, 9)
---------------------------------------------------------------------
mmc(45, 23, 18, 4)
---------------------------------------------------------------------

x, y, z = var('x, y, z')
---------------------------------------------------------------------
(30*x + 17*y == 201).solve_diophantine() # Solução geral nos inteiros
---------------------------------------------------------------------

def diofantina_minimal(diof): # Melhorar esse daqui
    
    t_0 = var('t_0')
    sol = (diof).solve_diophantine()
    
    x0 = ZZ(sol[0](t_0=0))
    y0 = ZZ(sol[1](t_0=0))        
    
    ax = ZZ(diof.lhs()(x=1, y=0))
    by = ZZ(diof.lhs()(x=0, y=1))
    
    if x0 > 0 and y0 >0:
        print 'a solução está nos naturais, mas não é necessariamente minimal'
        return x0, y0 ## não é a solução minimal
    
    elif x0 < 0 and y0 > 0:
        q = y0//ax
        y1 = y0%ax
        x1 = x0 + q*by
        if x1 < 0:
            return 'ERRO x1<0: nao existe solucao em N'
                
    elif x0 >0 and y0 < 0:
        q = x0//by
        x1 = x0%by
        y1 = y0 + q*ax
        if y1 < 0: 
            return 'ERRO y1<0: nao existe solucao em N'

    else:
        return 'ERRO: não existe solução em N'
    
    return x1, y1
---------------------------------------------------------------------
diofantina_minimal(16*x + 7*y == 601)
---------------------------------------------------------------------
diofantina_minimal(30*x + 17*y == 201)
---------------------------------------------------------------------
diofantina_minimal(90*x + 28*y == 22)
---------------------------------------------------------------------

(30*x + 17*y +13*z== 201).solve_diophantine()
---------------------------------------------------------------------

893765834.factor()
---------------------------------------------------------------------
76545343254657898908.factor()
---------------------------------------------------------------------
show(76545343254657898908.factor())
---------------------------------------------------------------------
prime_divisors(76545343254657898908)
---------------------------------------------------------------------
# M_83 não é primo
(2^83-1).factor()
---------------------------------------------------------------------
for i in prime_range(1,500):
    if is_prime(2^i-1):
        print i
---------------------------------------------------------------------

solve_mod(a*x == b, m)
---------------------------------------------------------------------
solve_mod(5*x == 2, 12)
---------------------------------------------------------------------
solve_mod(12*x == 36, 28)
---------------------------------------------------------------------
gcd(12, 28) # número de soluções
---------------------------------------------------------------------

euler_phi(26)
---------------------------------------------------------------------
euler_phi(98)
---------------------------------------------------------------------
euler_phi(5481235)
---------------------------------------------------------------------












